https://github.com/tunetolinux/Kubernetes-Installation/wiki
https://github.com/tunetolinux/Kubernetes-Installation.wiki.git


#!/bin/bash

# Step 1: Set Hostname and Update /etc/hosts for Local Name Resolution
echo "Setting hostname to kube-master"
sudo hostnamectl set-hostname kube-master

echo "Updating /etc/hosts for local name resolution"
# Open /etc/hosts and add the line for local resolution (edit as needed)
echo "127.0.1.1 kube-master" | sudo tee -a /etc/hosts

# Step 2: Disable Swap
echo "Disabling swap"
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab  # Remove any swap entries

# Step 3: Add Firewall Rules for Kubernetes Service Endpoint & Kubelet
echo "Adding firewall rules for Kubernetes services"
sudo ufw allow 6443/tcp  # Kubernetes API Server
sudo ufw allow 10250/tcp  # Kubelet
sudo ufw enable

# Step 4: Letting iptables See Bridged Traffic
echo "Configuring iptables for bridged traffic"
echo -e "net.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1" | sudo tee /etc/sysctl.d/k8s.conf
sudo sysctl --system

# Step 5: Add Kubernetes Repository
echo "Adding Kubernetes apt repository"
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt update

# Step 6: Install Package Utilities
echo "Installing package utilities"
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

# Step 7: Add Docker Repository and Install Docker
echo "Adding Docker repository and installing Docker"
# Add Docker's official GPG key
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# Add Docker's repository
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Install Docker
sudo apt update
sudo apt install -y containerd.io docker-ce docker-ce-cli

# Configure Docker to use overlay2 as storage driver
echo "Configuring Docker to use overlay2 storage driver"
sudo mkdir -p /etc/docker
echo '{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": { "max-size": "100m" },
  "storage-driver": "overlay2",
  "storage-opts": ["overlay2.override_kernel_check=true"]
}' | sudo tee /etc/docker/daemon.json

# Add Docker to systemd
echo "Enabling Docker service"
sudo mkdir -p /etc/systemd/system/docker.service.d
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo systemctl enable docker

# Step 8: Install Kubeadm, Kubelet, and Kubectl
echo "Installing Kubeadm, Kubelet, and Kubectl"
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl  # Prevent automatic updates

# Enable kubelet to start on boot
sudo systemctl enable --now kubelet

# Step 9: Initialize Kubernetes Cluster
echo "Initializing Kubernetes Cluster"
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.99.112

# Set up kubeconfig for kubectl command
echo "Setting up kubeconfig for kubectl"
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Apply the Weave network plugin (you can replace this with your preferred network plugin)
echo "Applying Weave network plugin"
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

# Step 10: Install Bash Completion for kubectl
echo "Installing bash completion for kubectl"
sudo apt install -y bash-completion
echo "source <(kubectl completion bash)" >> ~/.bashrc
source ~/.bashrc

# Final Message
echo "Kubernetes cluster setup is complete!"
