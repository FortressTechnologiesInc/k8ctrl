https://bizanosa.com/install-kubernetes-with-kubeadm/#edit-hosts-file

turn off swap by running: sudo swapoff -a ; sudo sed -i '/ swap / s/^/#/' /etc/fstab
vim /etc/fstab

-----------------------------------
sudo vi /etc/hosts
-------------------------------------

Forwarding IPv4 and letting iptables see bridged traffic:
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

#sysctl params required by setup, params persist across reboots

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

#Apply sysctl params without reboot

sudo sysctl --system


-------------------------------------------
lsmod | grep br_netfilter
lsmod | grep overlay
sudo sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

---------------------------------
Installing Containerd
Documentaion source : https://github.com/containerd/containerd/blob/main/docs/getting-started.md
#go to temp directory
cd /tmp

# download the latest version of containerd

wget https://github.com/containerd/containerd/releases/download/v1.7.23/containerd-1.7.23-linux-amd64.tar.gz

#Extract it

sudo tar Cxzvf /usr/local containerd-1.7.23-linux-amd64.tar.gz


sudo systemctl daemon-reload
sudo systemctl enable --now containerd

# Updateing/Installing runc

wget https://github.com/opencontainers/runc/releases/download/v1.2.0/runc.amd64
sudo install -m 755 runc.amd64 /usr/local/sbin/runc


# Cni - Download an extract

wget https://github.com/containernetworking/plugins/releases/download/v1.6.0/cni-plugins-linux-amd64-v1.6.0.tgz

sudo mkdir -p /opt/cni/bin
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.6.0.tgz
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.6.0.tgz

#Configuring the systemd cgroup driver
sudo su -
sudo mkdir /etc/containerd && sudo touch /etc/containerd/config.toml && sudo containerd config default > /etc/containerd/config.toml
#log out of root
exit
Edit this containerd service configuration file /etc/containerd/config.toml, ( sudo vi /etc/containerd/config.toml)
SystemdCgroup =true

Save /etc/containerd/config.toml
Apply the changes by restarting containerd
sudo systemctl restart containerd

Install kubeadm, kubelet and kubectl
sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
#install kubadm kubelet and kubectl and hold their versions to prevent the system from updating them.
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
#Enable the kubelet service before running kubeadm:
sudo systemctl enable --now kubelet

sudo kubeadm config images pull

kubeadm init --apiserver-advertise-address <controlplane ip> --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///run/containerd/containerd.sock

#Install the operator on your cluster.
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/tigera-operator.yaml
curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/custom-resources.yaml -O
kubectl create -f custom-resources.yaml
watch kubectl get pods -n calico-system

