https://www.devopshub.online/blog/a-step-by-step-guide-to-installing-kubernetes-with-kubeadm


sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
swapoff -a
-------------------------------------------------------------
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter
-------------------------------------------------------------------


# sysctl params required by setup, params persist across reboots

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables     = 1
net.bridge.bridge-nf-call-ip6tables  = 1
net.ipv4.ip_forward                               = 1
EOF
# Apply sysctl params without reboot 
sudo sysctl --system

----------------------------------------------------------------
lsmod | grep br_netfilter 
lsmod | grep overlay
Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, and net.ipv4.ip_forward system variables are set to 1 in your sysctl
sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
-------------------------------------------------------------------------------

#Installing a container runtime
apt-get install -y containerd

-----------------------------------------------
#Configure the container runtime to use systemd Cgroups.
Create default configuration
-------------------------------------------
mkdir -p /etc/containerd 
containerd config default > /etc/containerd/config.toml
Edit the configuration to set up CGroups 
Scroll down till you find a line with SystemdCgroup = false. Edit it to be SystemdCgroup = true, then save and exit vi
vi /etc/containerd/config.toml
Restart contained
systemctl restart containerd

-----------------------------------------------------
sudo apt-get update 
# apt-transport-https may be a dummy package; if so, you can skip that package 
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
Add the appropriate Kubernetes apt repository.
# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version:
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

-------------------------------------------------------------
Configure crictl 
crictl config \
    --set runtime-endpoint=unix:///run/containerd/containerd.sock \
    --set image-endpoint=unix:///run/containerd/containerd.sock

---------------------------------------------------------------------------------------
kubeadm init --apiserver-advertise-address <controlplane ip> --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///run/containerd/containerd.sock
